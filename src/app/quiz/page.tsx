"use client";
import NoSSR from "@mpth/react-no-ssr";
import usePrevious from "@react-hook/previous";
import arrayShuffle from "array-shuffle";
// eslint-disable-next-line camelcase
import { New_Tegomin } from "next/font/google";
import Image from "next/image";
import { usePathname, useRouter } from "next/navigation";
import rn from "random-number";
import { useEffect, useMemo, useState } from "react";
import { BiLinkExternal } from "react-icons/bi";
import Spacer from "react-spacer";
import styles from "./style.module.scss";

const newTegomin = New_Tegomin({ subsets: ["latin"], weight: "400" });

export default function Page(): JSX.Element {
  const pathname = usePathname();
  const count = useMemo(
    () => parseInt(pathname.split("/").at(-1) as string, 10) - 1,
    [pathname]
  );
  const quizList = useMemo(
    () => [
      {
        answer: "garo_x_nemui",
        choices: [
          "garo_x_nemui",
          "garo_x_osushi",
          "garo_x_onakasuita",
          "garo_x_sing",
        ],
        title: "„Åå„Çç„ÅÆ Twitter „ÅÆ ID „ÅØÔºü",
      },
      {
        answer: "Áü≠Ë∂≥„Éâ„ÉÉ„Ç∞",
        choices: [
          "Áü≠Ë∂≥„Éâ„ÉÉ„Ç∞",
          "„ÇØ„É™„Çπ„Éû„Çπ„ÇíÂè£ÂÆü„Å´È£ü„Åπ„Åü„ÅÑ„ÇÇ„ÅÆ„Åü„Åè„Åï„ÇìË≤∑„Å£„Å¶È£ü„Åπ„Çã„ÉÅ„É£„É≥„Çπ„ÇíÈÄÉ„Åô„Å™",
          "ÊòºÂ§úÈÄÜËª¢Ê≤ª„Åï„Å™„Åç„ÇÉÊ≤ª„Åï„Å™„Åç„ÇÉ",
          "ÔæàÔΩπÔæÅÔΩ¨Ôæù",
        ],
        title:
          "„Åå„Çç„ÅÆ„ÅØ„Åò„ÇÅ„Å¶„ÅÆ„ÉÑ„Ç§„Éº„Éà„ÅØ„Äå„ÅÜ„Åæ„ÅÑ„ÄÅ„ÄÅËÄ≥„ÅåÂπ∏„Åõ„Å†‚Ä¶„Äç\n„Åß„ÅØ 2 Áï™ÁõÆ„ÅÆ„ÉÑ„Ç§„Éº„Éà„ÅØÔºü",
      },
      {
        answer: "Á¨¨65‰Ωç",
        choices: ["Á¨¨65‰Ωç", "Á¨¨75‰Ωç", "Á¨¨85‰Ωç", "Á¨¨95‰Ωç"],
        title: "„Åå„ÇçÈñãÂÇ¨„ÅÆ„Äå‰º∏„Å∞„ÅóÊ£í„Åù„Åì„Å°„ÇÉ„ÅÜ„ÇÑ„ÇçÈÅ∏ÊâãÊ®©„Äç„Çπ„Éº„Éå„Éî„Éº„ÅØÁ¨¨‰Ωï‰ΩçÔºü",
      },
      {
        answer: "Âä©„Åã„Çä„Åô",
        choices: [
          "Âä©„Åã„Çä„Åô",
          "Âøô„Åó„Çâ„ÅÑ„Åä„Çì",
          "Âõ∞„Å£„Åü„Å™„Åæ„Åö",
          "„Åª„Çì„Åæ„Å´„Åô„Åæ„Åù„Çì„ÅÜ„Åï„Åé",
        ],
        title:
          "„Åå„Çç„ÅåÂãüÈõÜ„Åó„Åü„Ç¢„É≥„Ç±„Éº„Éà„Äå„Å©„Çå„ÅåÂ•Ω„ÅçÔºüÔºàÂ£∞„Å´Âá∫„Åó„Å¶Ë™≠„Çì„Åß„Å≠Ôºâ„Äç\nÊúÄ„ÇÇÊäïÁ•®Êï∞„ÅåÂ§ö„Åã„Å£„Åü„ÅÆ„ÅØÔºü",
      },
      {
        answer: "30.8%",
        choices: ["30.8%", "38.5%", "35.8%", "30.5%"],
        title: "„Åß„ÅØ 2 Áï™ÁõÆ„Å´ÊäïÁ•®Êï∞„ÅåÂ§ö„Åã„Å£„ÅüÈÅ∏ÊäûËÇ¢„ÅÆÊäïÁ•®Áéá„ÅØÔºü",
      },
      {
        answer: "1.5ÁÇπ",
        choices: ["0.5ÁÇπ", "1ÁÇπ", "1.5ÁÇπ", "2ÁÇπ"],
        title: "„Åã„Çç„Åå Twitter „ÅßÂ†±Âëä„Åó„ÅüÊò•„ÅÆ„Éë„É≥Á•≠„Çä„ÅßÈõÜ„ÇÅ„ÅüÁÇπÊï∞„ÅØÔºü",
      },
      {
        answer: "https://twitter.com/insideshoki/status/1606231621136285696",
        choices: [
          "https://twitter.com/insideshoki/status/1606231621136285696",
          "https://twitter.com/shuzonarita/status/1606471838221357058",
          "https://twitter.com/pc3589/status/1606225149312880640",
          "https://twitter.com/jo2geor2/status/1606242638599839745",
        ],
        title: "„Åå„Çç„Åå Twitter „Åß„ÅØ„Åò„ÇÅ„Å¶„ÅÑ„ÅÑ„Å≠„Åó„Åü„ÉÑ„Ç§„Éº„Éà„ÅØÔºü",
      },
      {
        answer: "„ÅÇ„Å∑„ÅßÔºÅÔºü",
        choices: [
          "„ÅÇ„Å∑„ÅßÔºÅÔºü",
          "ÈÄö‰ø°Âà∂ÈôêÂ•≥„Å´„Çà„Çã„ÉÜ„Çπ„ÉàÈÖç‰ø°",
          "„Å™„Çì„ÇÇ„Åó„Å¶„Å™„ÅÑ",
          "„Å≤„Åù„Å≤„Åù„ÅäË©±",
        ],
        title:
          "2023Âπ¥3Êúà30Êó•ÊôÇÁÇπ„Å´„Åä„ÅÑ„Å¶„ÄÅ\n„Çµ„É†„Éç„Ç§„É´„Åå 1 Â∫¶„Åó„Åã‰Ωø„Çè„Çå„Å¶„ÅÑ„Å™„ÅÑ„Åå„Çç„ÅÆ„ÉÑ„Ç§„Ç≠„É£„ÇπÈÖç‰ø°„ÅÆ„Çø„Ç§„Éà„É´„ÅØÔºü",
      },
      {
        answer: "„Å™„Çì„ÇÇ„Åó„Å¶„Å™„ÅÑ",
        choices: [
          "„Å™„Çì„ÇÇ„Åó„Å¶„Å™„ÅÑ",
          "„Å≤„Åù„Å≤„Åù„ÅäË©±",
          "„Åå„ÅÇ„ÅÇ„ÅÇ„ÅÇ„ÅÇ",
          "„ÅäÁ±≥ÁÇä„Åë„Çã„Åæ„Åß„Äú",
        ],
        title: "2023 Âπ¥ÊúÄÂàù„Å´Ë°å„Çè„Çå„Åü„Åå„Çç„ÅÆ„ÉÑ„Ç§„Ç≠„É£„ÇπÈÖç‰ø°„ÅÆ„Çø„Ç§„Éà„É´„ÅØÔºü",
      },
      {
        answer: "‰ºäÈÅîÂ∑ª„Å®„Åã„Åæ„Åº„Åì„Å®Â§©„Å∑„Çâ„Åù„Å∞",
        choices: [
          "‰ºäÈÅîÂ∑ª„Å®„Åã„Åæ„Åº„Åì„Å®Â§©„Å∑„Çâ„Åù„Å∞",
          "„Ç§„ÉÅ„Ç¥„Å®„Åü„Åè„ÅÇ„Çì„Å®„Åã„Å£„Å±„Åà„Å≥„Åõ„Çì",
          "„Éî„Ç∂",
          "„Å®„Çç„Åë„ÇãÊûúÂÆü„ÅÆ„Å©È£¥„Å®„Åü„Åπ„Å£Â≠ê„Å©„ÅÜ„Å∂„Å§",
        ],
        title: "„Åå„Çç„Åå 2023 Âπ¥„ÅÆ„ÅäÊ≠£Êúà„Å´È£ü„Åπ„Åü„ÇÇ„ÅÆ„ÅØÔºü",
      },
    ],
    []
  );
  // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-call
  const prevCount = usePrevious(count, 0);
  const [quiz, setQuiz] = useState(quizList[0]);
  const { choices, title } = useMemo(() => quiz, [quiz]);
  const [answers, setAnswers] = useState<string[]>([]);
  const router = useRouter();

  useEffect(() => {
    if (count === prevCount) {
      return;
    }

    const { choices, ...quiz } = quizList[count];

    setQuiz({
      ...quiz,
      choices: arrayShuffle(choices),
    });
  }, [count, prevCount, quizList]);

  useEffect(() => {
    history.pushState(null, "", location.href);

    const popstate = (): void => {
      history.go(1);
    };

    window.addEventListener("popstate", popstate);

    return () => {
      window.removeEventListener("popstate", popstate);
    };
  }, []);

  return (
    <NoSSR>
      <div className={styles.wrapper}>
        <Spacer grow="1" />
        <div className={styles.inner}>
          <div className={styles.heading1Wrapper}>
            <h1
              className={`${newTegomin.className} ${styles.heading1}`}
            >{`„Åå„Çç„ÇØ„Ç§„Ç∫ Á¨¨ ${count + 1} Âïè`}</h1>
          </div>
          <div className={styles.textsWrapper}>
            <h2 className={styles.heading2}>{title}</h2>
            <ul className={styles.list}>
              {choices.map((choice) => (
                <li className={styles.item} key={choice}>
                  <div
                    className={styles.choiceBlock}
                    onClick={(): void => {
                      const latestAnswers = [...answers, choice];

                      setAnswers(latestAnswers);

                      if (quizList.length >= count + 2) {
                        router.push(`/quiz/${count + 2}`);

                        return;
                      }

                      const correctAnswersCount = latestAnswers.filter(
                        (answer, index) => answer === quizList[index].answer
                      ).length;
                      const point = rn({
                        integer: true,
                        max:
                          correctAnswersCount === quizList.length
                            ? 100
                            : correctAnswersCount * 10 + 9,
                        min: correctAnswersCount * 10,
                      });

                      router.push(`/result/${point}`);
                    }}
                  >
                    {choice}
                  </div>
                  {choice.startsWith("http") ? (
                    <a href={choice} target="_blank">
                      <BiLinkExternal />
                    </a>
                  ) : null}
                </li>
              ))}
            </ul>
            {count ? (
              <div
                className={styles.returnBlock}
                onClick={(): void => {
                  setAnswers((prevAnswers) => {
                    prevAnswers.pop();

                    return prevAnswers;
                  });

                  router.push(`/quiz/${count}`);
                }}
              >
                Êàª„Çã
              </div>
            ) : null}
          </div>
          <div className={styles.imageWrapper}>
            <Image
              alt="üç£"
              height={125}
              quality={100}
              src="/garo.jpg"
              width={85}
            />
          </div>
        </div>
        <Spacer grow="1" />
      </div>
    </NoSSR>
  );
}
